{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\n\r\nconst uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/patisserie'\r\nconst options = {}\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n// Créer la connexion seulement si MongoDB est configuré\r\nif (process.env.MONGODB_URI && !process.env.MONGODB_URI.includes('localhost')) {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // En développement, utilise un cache global pour éviter de multiples connexions\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    // En production, crée une nouvelle connexion\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\nexport default clientPromise\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,UAAU,CAAC;AAEjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAEjD,wDAAwD;AACxD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc;IAC7E,wCAA4C;QAC1C,gFAAgF;QAChF,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAKF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'http://localhost:3000',\r\n    secret: process.env.NEXTAUTH_SECRET || 'f9wW0H0mtFDUeAG738nHV7HX3IYnkqBdSPHWhrRWuK0=',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'mongodb://localhost:27017/recettes-fr',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || '641484126032-nunid7mnfi7qvghnnsgn9pj07mvs82gq.apps.googleusercontent.com',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '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',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport { MongoDBAdapter } from '@auth/mongodb-adapter'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport clientPromise from './mongodb'\r\nimport { config } from './config'\r\n\r\nconst adapter = process.env.MONGODB_URI && !process.env.MONGODB_URI.includes('localhost') && clientPromise\r\n  ? MongoDBAdapter(clientPromise)\r\n  : undefined\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  ...(adapter && { adapter }),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: config.google.clientId,\r\n      clientSecret: config.google.clientSecret,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async session({ session, user, token }) {\r\n      if (session?.user) {\r\n        session.user.id = user?.id || token?.sub || ''\r\n                    session.user.role = (user as { role?: string })?.role || (token as { role?: string })?.role || 'user'\r\n      }\r\n      return session\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.role = (user as { role?: string }).role || 'user'\r\n      }\r\n      return token\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    error: '/auth/error',\r\n  },\r\n  session: {\r\n    strategy: adapter ? 'database' : 'jwt',\r\n  },\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;AAEA,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,2HAAa,GACtG,IAAA,yKAAc,EAAC,2HAAa,IAC5B;AAEG,MAAM,cAA+B;IAC1C,GAAI,WAAW;QAAE;IAAQ,CAAC;IAC1B,WAAW;QACT,IAAA,gKAAc,EAAC;YACb,UAAU,yHAAM,CAAC,MAAM,CAAC,QAAQ;YAChC,cAAc,yHAAM,CAAC,MAAM,CAAC,YAAY;QAC1C;KACD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE;YACpC,IAAI,SAAS,MAAM;gBACjB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,OAAO,OAAO;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,AAAC,MAA4B,QAAS,OAA6B,QAAQ;YAC7G;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,AAAC,KAA2B,IAAI,IAAI;YACnD;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,SAAS;QACP,UAAU,UAAU,aAAa;IACnC;AACF","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\r\nimport { authOptions } from '@/lib/auth'\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,4HAAW","debugId":null}}]
}