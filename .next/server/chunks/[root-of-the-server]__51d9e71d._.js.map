{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'fake_ip',\r\n    secret: process.env.NEXTAUTH_SECRET || 'fake_clé',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'fake_db',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || 'fake_google',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'fake_google_key',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\nimport { config } from './config'\r\n\r\n\r\nconst uri = process.env.MONGODB_URI || config.mongodb.uri || 'mongodb://localhost:27017/recettes-fr'\r\nconst options = {}\r\n\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n\r\nif (process.env.MONGODB_URI || config.mongodb.uri) {\r\n  // On crée la connexion — en dev on met en cache global pour éviter plusieurs connexions\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,IAAI;AAC7D,MAAM,UAAU,CAAC;AAGjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAGjD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACjD,wFAAwF;IACxF,wCAA4C;QAC1C,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAIF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAGe","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport { MongoDBAdapter } from '@auth/mongodb-adapter'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport EmailProvider from 'next-auth/providers/email'\r\nimport clientPromise from './mongodb'\r\nimport { config } from './config'\r\n\r\nconst adapter = process.env.MONGODB_URI && clientPromise\r\n  ? MongoDBAdapter(clientPromise)\r\n  : undefined\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  ...(adapter && { adapter }),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: config.google.clientId,\r\n      clientSecret: config.google.clientSecret,\r\n    }),\r\n    EmailProvider({\r\n      server: {\r\n        host: process.env.EMAIL_SERVER_HOST,\r\n        port: process.env.EMAIL_SERVER_PORT,\r\n        auth: {\r\n          user: process.env.EMAIL_SERVER_USER,\r\n          pass: process.env.EMAIL_SERVER_PASSWORD,\r\n        },\r\n      },\r\n      from: process.env.EMAIL_FROM,\r\n    }),\r\n  ],\r\n  debug: process.env.NODE_ENV === 'development',\r\n  callbacks: {\r\n    async session({ session, user, token }) {\r\n      if (session?.user) {\r\n        session.user.id = user?.id || token?.sub || ''\r\n                    session.user.role = (user as { role?: string })?.role || (token as { role?: string })?.role || 'user'\r\n      }\r\n      return session\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.role = (user as { role?: string }).role || 'user'\r\n      }\r\n      return token\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    error: '/auth/error',\r\n  },\r\n  session: {\r\n    strategy: adapter ? 'database' : 'jwt',\r\n  },\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI,2HAAa,GACpD,IAAA,yKAAc,EAAC,2HAAa,IAC5B;AAEG,MAAM,cAA+B;IAC1C,GAAI,WAAW;QAAE;IAAQ,CAAC;IAC1B,WAAW;QACT,IAAA,gKAAc,EAAC;YACb,UAAU,yHAAM,CAAC,MAAM,CAAC,QAAQ;YAChC,cAAc,yHAAM,CAAC,MAAM,CAAC,YAAY;QAC1C;QACA,IAAA,+JAAa,EAAC;YACZ,QAAQ;gBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;gBACzC;YACF;YACA,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;KACD;IACD,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE;YACpC,IAAI,SAAS,MAAM;gBACjB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,OAAO,OAAO;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,AAAC,MAA4B,QAAS,OAA6B,QAAQ;YAC7G;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,AAAC,KAA2B,IAAI,IAAI;YACnD;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,SAAS;QACP,UAAU,UAAU,aAAa;IACnC;AACF","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/init-admin.ts"],"sourcesContent":["import clientPromise from './mongodb'\r\nimport { ObjectId } from 'mongodb'\r\n\r\nexport async function initAdmin() {\r\n  try {\r\n    if (!clientPromise) {\r\n      console.log('Mode démonstration : MongoDB non configuré')\r\n      return\r\n    }\r\n    \r\n    const client = await clientPromise\r\n    // Utilise la DB par défaut définie par l'URI de connexion si présente\r\n    const db = client.db() // si l'URI contient /nomDB alors ce sera utilisé\r\n    const users = db.collection('users')\r\n    \r\n    // Vérifier s'il y a déjà des utilisateurs\r\n    const userCount = await users.countDocuments()\r\n    \r\n    if (userCount === 0) {\r\n      console.log('Aucun utilisateur trouvé. Le premier utilisateur connecté sera admin.')\r\n      return\r\n    }\r\n    \r\n    // Vérifier s'il y a déjà un admin\r\n    const adminExists = await users.findOne({ role: 'admin' })\r\n    \r\n    if (!adminExists) {\r\n      console.log('Aucun admin trouvé. Le prochain utilisateur connecté sera admin.')\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'initialisation admin:', error)\r\n  }\r\n}\r\n\r\nexport async function setUserAsAdmin(userId: string) {\r\n  try {\r\n    // Vérifier si MongoDB est disponible\r\n    if (!clientPromise || !process.env.MONGODB_URI || process.env.MONGODB_URI.includes('localhost')) {\r\n      console.log('MongoDB non configuré. Mode démonstration activé.')\r\n      return { success: true, message: 'Mode démonstration - Admin simulé' }\r\n    }\r\n\r\n    const client = await clientPromise\r\n    const db = client.db('patisserie')\r\n    const users = db.collection('users')\r\n    \r\n    // Vérifier s'il y a déjà un admin\r\n    const adminExists = await users.findOne({ role: 'admin' })\r\n    \r\n    if (!adminExists) {\r\n      await users.updateOne(\r\n        { _id: new ObjectId(userId) },\r\n        { $set: { role: 'admin' } }\r\n      )\r\n      console.log('Utilisateur défini comme admin:', userId)\r\n      return { success: true, message: 'Rôle admin défini avec succès' }\r\n    } else {\r\n      return { success: false, message: 'Un administrateur existe déjà' }\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la définition admin:', error)\r\n    return { success: false, message: 'Erreur de base de données' }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,IAAI,CAAC,2HAAa,EAAE;YAClB,QAAQ,GAAG,CAAC;YACZ;QACF;QAEA,MAAM,SAAS,MAAM,2HAAa;QAClC,sEAAsE;QACtE,MAAM,KAAK,OAAO,EAAE,GAAG,iDAAiD;;QACxE,MAAM,QAAQ,GAAG,UAAU,CAAC;QAE5B,0CAA0C;QAC1C,MAAM,YAAY,MAAM,MAAM,cAAc;QAE5C,IAAI,cAAc,GAAG;YACnB,QAAQ,GAAG,CAAC;YACZ;QACF;QAEA,kCAAkC;QAClC,MAAM,cAAc,MAAM,MAAM,OAAO,CAAC;YAAE,MAAM;QAAQ;QAExD,IAAI,CAAC,aAAa;YAChB,QAAQ,GAAG,CAAC;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;IAC3D;AACF;AAEO,eAAe,eAAe,MAAc;IACjD,IAAI;QACF,qCAAqC;QACrC,IAAI,CAAC,2HAAa,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,QAAQ,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc;YAC/F,QAAQ,GAAG,CAAC;YACZ,OAAO;gBAAE,SAAS;gBAAM,SAAS;YAAoC;QACvE;QAEA,MAAM,SAAS,MAAM,2HAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,QAAQ,GAAG,UAAU,CAAC;QAE5B,kCAAkC;QAClC,MAAM,cAAc,MAAM,MAAM,OAAO,CAAC;YAAE,MAAM;QAAQ;QAExD,IAAI,CAAC,aAAa;YAChB,MAAM,MAAM,SAAS,CACnB;gBAAE,KAAK,IAAI,mHAAQ,CAAC;YAAQ,GAC5B;gBAAE,MAAM;oBAAE,MAAM;gBAAQ;YAAE;YAE5B,QAAQ,GAAG,CAAC,mCAAmC;YAC/C,OAAO;gBAAE,SAAS;gBAAM,SAAS;YAAgC;QACnE,OAAO;YACL,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAgC;QACpE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO;YAAE,SAAS;YAAO,SAAS;QAA4B;IAChE;AACF","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/auth/init-admin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { getServerSession } from 'next-auth/next'\r\nimport { authOptions } from '@/lib/auth'\r\nimport { setUserAsAdmin } from '@/lib/init-admin'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    \r\n    if (!session?.user) {\r\n      return NextResponse.json({ error: 'Non authentifié' }, { status: 401 })\r\n    }\r\n    \r\n    // Utiliser l'ID de la session ou l'email comme fallback\r\n    const userId = session.user.id || session.user.email || 'unknown'\r\n    \r\n    const result = await setUserAsAdmin(userId)\r\n    \r\n    if (result.success) {\r\n      return NextResponse.json({ \r\n        success: true, \r\n        message: result.message \r\n      })\r\n    } else {\r\n      return NextResponse.json({ \r\n        success: false, \r\n        error: result.message \r\n      }, { status: 400 })\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur init admin:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur lors de la définition du rôle admin' }, \r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,mKAAgB,EAAC,4HAAW;QAElD,IAAI,CAAC,SAAS,MAAM;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,wDAAwD;QACxD,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE,IAAI,QAAQ,IAAI,CAAC,KAAK,IAAI;QAExD,MAAM,SAAS,MAAM,IAAA,wIAAc,EAAC;QAEpC,IAAI,OAAO,OAAO,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS,OAAO,OAAO;YACzB;QACF,OAAO;YACL,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,OAAO,OAAO;YACvB,GAAG;gBAAE,QAAQ;YAAI;QACnB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6C,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}