{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'fake_ip',\r\n    secret: process.env.NEXTAUTH_SECRET || 'fake_clé',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'fake_db',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || 'fake_google',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'fake_google_key',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\nimport { config } from './config'\r\n\r\n\r\nconst uri = process.env.MONGODB_URI || config.mongodb.uri || 'mongodb://localhost:27017/recettes-fr'\r\nconst options = {}\r\n\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n\r\nif (process.env.MONGODB_URI || config.mongodb.uri) {\r\n  // On crée la connexion — en dev on met en cache global pour éviter plusieurs connexions\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,IAAI;AAC7D,MAAM,UAAU,CAAC;AAGjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAGjD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACjD,wFAAwF;IACxF,wCAA4C;QAC1C,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAIF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAGe","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport { MongoDBAdapter } from '@auth/mongodb-adapter'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport EmailProvider from 'next-auth/providers/email'\r\nimport CredentialsProvider from 'next-auth/providers/credentials'\r\nimport bcrypt from 'bcryptjs'\r\nimport clientPromise from './mongodb'\r\nimport { config } from './config'\r\n\r\nconst adapter = process.env.MONGODB_URI && clientPromise\r\n  ? MongoDBAdapter(clientPromise)\r\n  : undefined\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  ...(adapter && { adapter }),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: config.google.clientId,\r\n      clientSecret: config.google.clientSecret,\r\n    }),\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Mot de passe', type: 'password' }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          const client = await clientPromise\r\n          const db = client.db('recettes-fr')\r\n          \r\n          const user = await db.collection('users').findOne({ \r\n            email: credentials.email \r\n          })\r\n\r\n          if (!user || !user.password) {\r\n            return null\r\n          }\r\n\r\n          const isPasswordValid = await bcrypt.compare(\r\n            credentials.password,\r\n            user.password\r\n          )\r\n\r\n          if (!isPasswordValid) {\r\n            return null\r\n          }\r\n\r\n          return {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n            name: user.name,\r\n            role: user.role || 'user'\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de l\\'authentification:', error)\r\n          return null\r\n        }\r\n      }\r\n    }),\r\n    EmailProvider({\r\n      server: {\r\n        host: process.env.EMAIL_SERVER_HOST,\r\n        port: parseInt(process.env.EMAIL_SERVER_PORT || '465'),\r\n        auth: {\r\n          user: process.env.EMAIL_SERVER_USER,\r\n          pass: process.env.EMAIL_SERVER_PASSWORD,\r\n        },\r\n        secure: false, // false pour le port 587 avec STARTTLS\r\n        tls: {\r\n          rejectUnauthorized: false\r\n        }\r\n      },\r\n      from: process.env.EMAIL_FROM,\r\n    }),\r\n  ],\r\n  debug: process.env.NODE_ENV === 'development',\r\n  callbacks: {\r\n    async session({ session, user, token }) {\r\n      if (session?.user) {\r\n        session.user.id = user?.id || token?.sub || ''\r\n        session.user.role = (user as { role?: string })?.role || (token as { role?: string })?.role || 'user'\r\n      }\r\n      return session\r\n    },\r\n    async jwt({ token, user, account }) {\r\n      if (user) {\r\n        token.role = (user as { role?: string }).role || 'user'\r\n        \r\n        // Sauvegarder l'utilisateur en BDD lors de la première connexion\r\n        if (account?.provider === 'credentials') {\r\n          try {\r\n            const client = await clientPromise\r\n            const db = client.db('recettes-fr')\r\n            \r\n            // Vérifier si l'utilisateur existe déjà\r\n            const existingUser = await db.collection('users').findOne({ \r\n              email: user.email \r\n            })\r\n            \r\n            if (!existingUser) {\r\n              // Créer l'utilisateur en BDD\r\n              await db.collection('users').insertOne({\r\n                _id: user.id,\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role || 'user',\r\n                createdAt: new Date(),\r\n                emailVerified: null\r\n              })\r\n              console.log('Utilisateur sauvegardé en BDD:', user.email)\r\n            }\r\n          } catch (error) {\r\n            console.error('Erreur lors de la sauvegarde de l\\'utilisateur:', error)\r\n          }\r\n        }\r\n      }\r\n      return token\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    error: '/auth/error',\r\n  },\r\n  session: {\r\n    strategy: 'jwt', // Utiliser JWT pour Credentials, database pour les autres\r\n  },\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/recipes/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { getServerSession } from 'next-auth'\r\nimport { authOptions } from '@/lib/auth'\r\nimport clientPromise from '@/lib/mongodb'\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  const params = await context.params\r\n  \r\n  try {\r\n    const recipeId = params.id\r\n\r\n    const client = await clientPromise\r\n    if (!client) {\r\n      throw new Error('Failed to connect to database')\r\n    }\r\n    const db = client.db('recettes-fr')\r\n\r\n    const recipe = await db.collection('recipes').findOne({ id: recipeId })\r\n\r\n    if (!recipe) {\r\n      return NextResponse.json({ error: 'Recette non trouvée' }, { status: 404 })\r\n    }\r\n\r\n    // Incrémenter les vues\r\n    await db.collection('recipe_views').insertOne({\r\n      id: `view_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      recipeId: recipeId,\r\n      userId: null, // Pour les utilisateurs non connectés\r\n      ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n      userAgent: request.headers.get('user-agent') || 'unknown',\r\n      viewedAt: new Date()\r\n    })\r\n\r\n    // Mettre à jour le compteur de vues\r\n    await db.collection('recipes').updateOne(\r\n      { id: recipeId },\r\n      { $inc: { views: 1 } }\r\n    )\r\n\r\n    return NextResponse.json(recipe)\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération de la recette:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur interne du serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  const params = await context.params\r\n  \r\n  try {\r\n    const recipeId = params.id\r\n    const session = await getServerSession(authOptions)\r\n    \r\n    if (!session?.user) {\r\n      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 })\r\n    }\r\n\r\n    const recipeData = await request.json()\r\n    const client = await clientPromise\r\n    if (!client) {\r\n      throw new Error('Failed to connect to database')\r\n    }\r\n    const db = client.db('recettes-fr')\r\n\r\n    // Vérifier que l'utilisateur est l'auteur ou un admin\r\n    const existingRecipe = await db.collection('recipes').findOne({ id: recipeId })\r\n    \r\n    if (!existingRecipe) {\r\n      return NextResponse.json({ error: 'Recette non trouvée' }, { status: 404 })\r\n    }\r\n\r\n    if (existingRecipe.author.id !== session.user.id && session.user.role !== 'admin') {\r\n      return NextResponse.json({ error: 'Non autorisé' }, { status: 403 })\r\n    }\r\n\r\n    const updateData = {\r\n      ...recipeData,\r\n      updatedAt: new Date(),\r\n      publishedAt: recipeData.isPublished && !existingRecipe.isPublished ? new Date() : existingRecipe.publishedAt\r\n    }\r\n\r\n    const result = await db.collection('recipes').updateOne(\r\n      { id: recipeId },\r\n      { $set: updateData }\r\n    )\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json({ error: 'Recette non trouvée' }, { status: 404 })\r\n    }\r\n\r\n    return NextResponse.json({ success: true })\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour de la recette:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur interne du serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  context: { params: { id: string } }\r\n) {\r\n  const params = await context.params\r\n  \r\n  try {\r\n    const recipeId = params.id\r\n    const session = await getServerSession(authOptions)\r\n    \r\n    if (!session?.user) {\r\n      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 })\r\n    }\r\n\r\n    const client = await clientPromise\r\n    if (!client) {\r\n      throw new Error('Failed to connect to database')\r\n    }\r\n    const db = client.db('recettes-fr')\r\n\r\n    // Vérifier que l'utilisateur est l'auteur ou un admin\r\n    const existingRecipe = await db.collection('recipes').findOne({ id: recipeId })\r\n    \r\n    if (!existingRecipe) {\r\n      return NextResponse.json({ error: 'Recette non trouvée' }, { status: 404 })\r\n    }\r\n\r\n    if (existingRecipe.author.id !== session.user.id && session.user.role !== 'admin') {\r\n      return NextResponse.json({ error: 'Non autorisé' }, { status: 403 })\r\n    }\r\n\r\n    // Supprimer la recette et les données associées\r\n    await db.collection('recipes').deleteOne({ id: recipeId })\r\n    await db.collection('recipe_views').deleteMany({ recipeId: recipeId })\r\n    await db.collection('recipe_ratings').deleteMany({ recipeId: recipeId })\r\n\r\n    return NextResponse.json({ success: true })\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la suppression de la recette:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur interne du serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}