{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'fake_ip',\r\n    secret: process.env.NEXTAUTH_SECRET || 'fake_clé',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'fake_db',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || 'fake_google',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'fake_google_key',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\nimport { config } from './config'\r\n\r\n\r\nconst uri = process.env.MONGODB_URI || config.mongodb.uri || 'mongodb://localhost:27017/recettes-fr'\r\nconst options = {}\r\n\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n\r\nif (process.env.MONGODB_URI || config.mongodb.uri) {\r\n  // On crée la connexion — en dev on met en cache global pour éviter plusieurs connexions\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,IAAI;AAC7D,MAAM,UAAU,CAAC;AAGjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAGjD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACjD,wFAAwF;IACxF,wCAA4C;QAC1C,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAIF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAGe","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/recipes/featured/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport clientPromise from '@/lib/mongodb'\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise\r\n    if (!client) {\r\n      return NextResponse.json(\r\n        { error: 'Erreur de connexion à la base de données' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n    const db = client.db()\r\n\r\n    // Récupère toutes les recettes, triées par vues\r\n    let topRecipes = await db.collection('recipes')\r\n      .find({\r\n        // Si une recette n'a pas de champ published, on la considère comme publiée\r\n        $or: [\r\n          { published: true },\r\n          { published: { $exists: false } }\r\n        ]\r\n      })\r\n      .project({\r\n        _id: 1,\r\n        title: 1,\r\n        description: 1,\r\n        image: 1,\r\n        author: 1,\r\n        category: 1,\r\n        views: 1,\r\n        difficulty: 1,\r\n        preparationTime: 1,\r\n        createdAt: 1\r\n      })\r\n      // Trie par nombre de vues décroissant, si views n'existe pas, utilise 0\r\n      .sort({ views: -1 })\r\n      .limit(3)\r\n      .toArray()\r\n\r\n    // Si certaines recettes n'ont pas de vues, initialise à 0\r\n    topRecipes = topRecipes.map(recipe => ({\r\n      ...recipe,\r\n      views: recipe.views || 0,\r\n      difficulty: recipe.difficulty || 'facile',\r\n      preparationTime: recipe.preparationTime || 30\r\n    }))\r\n\r\n    return NextResponse.json(topRecipes)\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des recettes populaires:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,2HAAa;QAClC,IAAI,CAAC,QAAQ;YACX,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2C,GACpD;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,KAAK,OAAO,EAAE;QAEpB,gDAAgD;QAChD,IAAI,aAAa,MAAM,GAAG,UAAU,CAAC,WAClC,IAAI,CAAC;YACJ,2EAA2E;YAC3E,KAAK;gBACH;oBAAE,WAAW;gBAAK;gBAClB;oBAAE,WAAW;wBAAE,SAAS;oBAAM;gBAAE;aACjC;QACH,GACC,OAAO,CAAC;YACP,KAAK;YACL,OAAO;YACP,aAAa;YACb,OAAO;YACP,QAAQ;YACR,UAAU;YACV,OAAO;YACP,YAAY;YACZ,iBAAiB;YACjB,WAAW;QACb,EACA,wEAAwE;SACvE,IAAI,CAAC;YAAE,OAAO,CAAC;QAAE,GACjB,KAAK,CAAC,GACN,OAAO;QAEV,0DAA0D;QAC1D,aAAa,WAAW,GAAG,CAAC,CAAA,SAAU,CAAC;gBACrC,GAAG,MAAM;gBACT,OAAO,OAAO,KAAK,IAAI;gBACvB,YAAY,OAAO,UAAU,IAAI;gBACjC,iBAAiB,OAAO,eAAe,IAAI;YAC7C,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2DAA2D;QACzE,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}