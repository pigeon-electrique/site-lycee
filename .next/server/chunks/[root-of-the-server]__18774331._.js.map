{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'fake_ip',\r\n    secret: process.env.NEXTAUTH_SECRET || 'fake_clé',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'fake_db',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || 'fake_google',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'fake_google_key',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\nimport { config } from './config'\r\n\r\n\r\nconst uri = process.env.MONGODB_URI || config.mongodb.uri || 'mongodb://localhost:27017/recettes-fr'\r\nconst options = {}\r\n\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n\r\nif (process.env.MONGODB_URI || config.mongodb.uri) {\r\n  // On crée la connexion — en dev on met en cache global pour éviter plusieurs connexions\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,IAAI;AAC7D,MAAM,UAAU,CAAC;AAGjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAGjD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACjD,wFAAwF;IACxF,wCAA4C;QAC1C,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAIF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAGe","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport bcrypt from 'bcryptjs'\r\nimport clientPromise from '@/lib/mongodb'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { name, email, password } = await request.json()\r\n\r\n    // Validation des données\r\n    if (!name || !email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Tous les champs sont requis' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      return NextResponse.json(\r\n        { error: 'Le mot de passe doit contenir au moins 6 caractères' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Connexion à MongoDB\r\n    const client = await clientPromise\r\n    const db = client.db('recettes-fr')\r\n\r\n    // Vérifier si l'utilisateur existe déjà\r\n    const existingUser = await db.collection('users').findOne({ email })\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'Un compte avec cet email existe déjà' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Hasher le mot de passe\r\n    const hashedPassword = await bcrypt.hash(password, 12)\r\n\r\n    // Créer l'utilisateur\r\n    const user = {\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n      role: 'user',\r\n      createdAt: new Date(),\r\n      emailVerified: null\r\n    }\r\n\r\n    const result = await db.collection('users').insertOne(user)\r\n\r\n    return NextResponse.json(\r\n      { \r\n        message: 'Compte créé avec succès',\r\n        userId: result.insertedId \r\n      },\r\n      { status: 201 }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la création du compte:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur interne du serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,yBAAyB;QACzB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsD,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,SAAS,MAAM,2HAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,wCAAwC;QACxC,MAAM,eAAe,MAAM,GAAG,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAM;QAClE,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,iBAAiB,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,sBAAsB;QACtB,MAAM,OAAO;YACX;YACA;YACA,UAAU;YACV,MAAM;YACN,WAAW,IAAI;YACf,eAAe;QACjB;QAEA,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;QAEtD,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,QAAQ,OAAO,UAAU;QAC3B,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}