{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/config.ts"],"sourcesContent":["// Configuration temporaire pour le développement\r\nexport const config = {\r\n  nextAuth: {\r\n    url: process.env.NEXTAUTH_URL || 'fake_ip',\r\n    secret: process.env.NEXTAUTH_SECRET || 'fake_clé',\r\n  },\r\n  mongodb: {\r\n    uri: process.env.MONGODB_URI || 'fake_db',\r\n  },\r\n  google: {\r\n    clientId: process.env.GOOGLE_CLIENT_ID || 'fake_google',\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'fake_google_key',\r\n  },\r\n}\r\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AAC1C,MAAM,SAAS;IACpB,UAAU;QACR,KAAK,QAAQ,GAAG,CAAC,YAAY,IAAI;QACjC,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACzC;IACA,SAAS;QACP,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI;IAClC;IACA,QAAQ;QACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IACpD;AACF","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\r\nimport { config } from './config'\r\n\r\n\r\nconst uri = process.env.MONGODB_URI || config.mongodb.uri || 'mongodb://localhost:27017/recettes-fr'\r\nconst options = {}\r\n\r\n\r\nlet client: MongoClient | null = null\r\nlet clientPromise: Promise<MongoClient> | null = null\r\n\r\n\r\nif (process.env.MONGODB_URI || config.mongodb.uri) {\r\n  // On crée la connexion — en dev on met en cache global pour éviter plusieurs connexions\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n      _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n      client = new MongoClient(uri, options)\r\n      globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n  } else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n  }\r\n} else {\r\n  console.log('Mode démonstration : MongoDB non configuré')\r\n}\r\n\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,IAAI;AAC7D,MAAM,UAAU,CAAC;AAGjB,IAAI,SAA6B;AACjC,IAAI,gBAA6C;AAGjD,IAAI,QAAQ,GAAG,CAAC,WAAW,IAAI,yHAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACjD,wFAAwF;IACxF,wCAA4C;QAC1C,MAAM;QAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;YACxC,SAAS,IAAI,sHAAW,CAAC,KAAK;YAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;QACtD;QACA,gBAAgB,gBAAgB,mBAAmB;IACrD;;AAIF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;uCAGe","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///J:/Dev/patisserie/app/api/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport clientPromise from '@/lib/mongodb'\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const client = await clientPromise\r\n    const db = client.db('recettes-fr')\r\n\r\n    // Statistiques de base\r\n    const totalRecipes = await db.collection('recipes').countDocuments()\r\n    const totalUsers = await db.collection('users').countDocuments()\r\n    const totalLikes = await db.collection('likes').countDocuments()\r\n\r\n    // Récupérer les catégories les plus populaires\r\n    const popularCategories = await db.collection('recipes')\r\n      .aggregate([\r\n        { $unwind: '$categories' },\r\n        { $group: { _id: '$categories', count: { $sum: 1 } } },\r\n        { $sort: { count: -1 } },\r\n        { $limit: 3 }\r\n      ]).toArray()\r\n\r\n    // Note moyenne globale\r\n    const ratings = await db.collection('recipes')\r\n      .aggregate([\r\n        { $match: { ratingCount: { $gt: 0 } } },\r\n        { $group: { _id: null, avgRating: { $avg: '$rating' } } }\r\n      ]).toArray()\r\n\r\n    const averageRating = ratings.length > 0 ? \r\n      Math.round(ratings[0].avgRating * 10) / 10 : 0\r\n\r\n    return NextResponse.json({\r\n      totalRecipes,\r\n      totalUsers,\r\n      totalLikes,\r\n      popularCategories,\r\n      averageRating\r\n    })\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des statistiques:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erreur serveur' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,SAAS,MAAM,2HAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,uBAAuB;QACvB,MAAM,eAAe,MAAM,GAAG,UAAU,CAAC,WAAW,cAAc;QAClE,MAAM,aAAa,MAAM,GAAG,UAAU,CAAC,SAAS,cAAc;QAC9D,MAAM,aAAa,MAAM,GAAG,UAAU,CAAC,SAAS,cAAc;QAE9D,+CAA+C;QAC/C,MAAM,oBAAoB,MAAM,GAAG,UAAU,CAAC,WAC3C,SAAS,CAAC;YACT;gBAAE,SAAS;YAAc;YACzB;gBAAE,QAAQ;oBAAE,KAAK;oBAAe,OAAO;wBAAE,MAAM;oBAAE;gBAAE;YAAE;YACrD;gBAAE,OAAO;oBAAE,OAAO,CAAC;gBAAE;YAAE;YACvB;gBAAE,QAAQ;YAAE;SACb,EAAE,OAAO;QAEZ,uBAAuB;QACvB,MAAM,UAAU,MAAM,GAAG,UAAU,CAAC,WACjC,SAAS,CAAC;YACT;gBAAE,QAAQ;oBAAE,aAAa;wBAAE,KAAK;oBAAE;gBAAE;YAAE;YACtC;gBAAE,QAAQ;oBAAE,KAAK;oBAAM,WAAW;wBAAE,MAAM;oBAAU;gBAAE;YAAE;SACzD,EAAE,OAAO;QAEZ,MAAM,gBAAgB,QAAQ,MAAM,GAAG,IACrC,KAAK,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,GAAG,MAAM,KAAK;QAE/C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oDAAoD;QAClE,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}